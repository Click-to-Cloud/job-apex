{"title":"Job.apex","githubRepo":"Click-to-Cloud/Job.apex","googleAnalytics":"","index":{"title":"Home","description":"Job.apex is a library that aims to easily create and manage Apex scheduled jobs.","content":" Fluent API Job.apex uses a fluent API to build cron expressions. Repeating Jobs Job.apex can create jobs that repeats itself in an interval less than 1 hour. Job Management Job.apex provides API to easily manage scheduled jobs. ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/job-apex/./","children":{"docs":{"title":"Docs","description":"Everything you need to know to get started.","content":" Docs Start learning how to leverage the power of . Choose a Guide Each one provide step by step coverage for every core feature. ","srcFilePath":"src/pages/docs/index.soy","id":"docs","location":"/docs/","url":"/job-apex/docs/","children":{"search":{"title":"Search","description":"Find what you're looking for in the documentation.","hidden":true,"content":" Electric Docs Start learning how to leverage the power of . ","srcFilePath":"src/pages/docs/search.soy","id":"search","location":"/docs/search.html","url":"/job-apex/docs/search.html"},"Job":{"title":"Job","description":"Job","layout":"guide","icon":"flash","weight":1,"content":" {$page.description} Jobs We have two types of Jobs here. The first type is cron expression jobs, which builds cron expressions internally and delegate everything to cron expression scheduling. The other type is repeating jobs, which repeat themselves at a given interval, and are more flexible in use. Repeating jobs are defined by using methods like 'startAt(Xxx)' or 'startNow()', followed by 'afterXxx' and 'repeatXxx'. Dependencies Job.apex has a dependency over R.apex. We utilize R.apex to grant the power of functions to Job.apex. Job Executor We separate the job execution from job scheduling. So users only need to pass in job executors, and Job.apex will take care of the job scheduling. public class CustomJob extends Func { public CustomJob() { super(1); } public override Object exec(Object context) { System.debug('Custom job executed'); return null; } } Here we defined a CustomJob executor with our custom logic inside it. Then we can schedule our job like this: new Job('test', new CustomJob()).everyDay().atHour(8).schedule(); ","srcFilePath":"src/pages/docs/Job/index.md","id":"Job","location":"/docs/Job/","url":"/job-apex/docs/Job/"},"JobMethods":{"children":{"common":{"title":"Common Methods","description":"Common Methods","layout":"guide","icon":"code-file","weight":2,"content":" {$page.description} getName Get the name of the Job new Job('test', R.debug).getName(); // test schedule Schedule the job. new Job('test', R.debug).everyDay().atHour(8).schedule(); // schedule the job that runs at 8:00 every day getCronExpression Get the generated cron expression. ","srcFilePath":"src/pages/docs/JobMethods/common.md","id":"common","location":"/docs/JobMethods/common.html","url":"/job-apex/docs/JobMethods/common.html"},"creation":{"title":"Constructors","description":"Constructors","layout":"guide","icon":"code-file","weight":1,"content":" {$page.description} Constructors Here are the constructors for Jobs. | Constructor | Description | | ----------- | ----------- | | Job(String, Func) | Construct a Job with the name and Func as executor | | Job(String, Schedulable) | Construct a Job with the name and the schedulable | ","srcFilePath":"src/pages/docs/JobMethods/creation.md","id":"creation","location":"/docs/JobMethods/creation.html","url":"/job-apex/docs/JobMethods/creation.html"},"cron":{"title":"Cron Expression Job Methods","description":"Cron Expression Job Methods","layout":"guide","icon":"code-file","weight":3,"content":" {$page.description} cron Specify the cron expression. new Job('test', R.debug).cron('0 0 0 1 3 ?').getCronExpression() // 0 0 0 1 3 ? atSecond Specify the second component of the cron expression. new Job('test', R.debug).atSecond(10).getCronExpression() // 10 0 0 * * ? atMinute Specify the minute component of the cron expression. new Job('test', R.debug).atMinute(30).getCronExpression() // 0 30 0 * * ? atHour Specify the hour component of the cron expression. new Job('test', R.debug).atHour(12).getCronExpression() // 0 0 12 * * ? onDay Specify on which day of month. new Job('test', R.debug).onDay(12).getCronExpression() // 0 0 0 12 * ? fromDay Specify from which day, usually used with 'everyDays'. new Job('test', R.debug).fromDay(2).everyDays(3).getCronExpression() // 0 0 0 2/3 * ? onDays Specify on which days. new Job('test', R.debug).onDays(new List{ 3, 4, 5 }).getCronExpression() // 0 0 0 3,4,5 * ? betweenDays Specify a day range. new Job('test', R.debug).betweenDays(2, 5).getCronExpression() // 0 0 0 2-5 * ? everyDay Specify every day. new Job('test', R.debug).everyDay().getCronExpression() // 0 0 0 * * ? everyDays Specify every N days. new Job('test', R.debug).betweenDays(1, 20).everyDays(2).getCronExpression() // 0 0 0 1-20/2 * ? inMonth Specify in which month. new Job('test', R.debug).inMonth('Sep').getCronExpression() // 0 0 0 * 9 ? fromMonth Specify from which month. new Job('test', R.debug).fromMonth(1).everyMonths(2).getCronExpression() // 0 0 0 * 1/2 ? inMonths Specify in which months. new Job('test', R.debug).inMonths(new List{ 'March', 'Octo' }).getCronExpression() // 0 0 0 * 3,10 ? betweenMonths Specify the month range. new Job('test', R.debug).betweenMonths(1, 'July').getCronExpression() // 0 0 0 * 1-7 ? everyMonth Specify every month. new Job('test', R.debug).everyMonth().getCronExpression() // 0 0 0 * * ? everyMonths Specify every N months. new Job('test', R.debug).betweenMonths(1, 12).everyMonths(2).getCronExpression() // 0 0 0 * 1-12/2 ? onDayOfWeek Specify on which day of week. new Job('test', R.debug).onDayOfWeek(1).getCronExpression() // 0 0 0 ? * 2 fromDayOfWeek Specify from which day of week. new Job('test', R.debug).fromDayOfWeek(1).everyDaysOfWeek(2).getCronExpression() // 0 0 0 ? * 2/2 onDaysOfWeek Specify on which days of week. new Job('test', R.debug).onDaysOfWeek(new List{ 1, 'Tu' }).getCronExpression() // 0 0 0 ? * 2,3 betweenDaysOfWeek Specify the day of week range. new Job('test', R.debug).betweenDaysOfWeek(2, 'Sun').getCronExpression() // 0 0 0 ? * 3-1 everyDayOfWeek Specify every day of week. new Job('test', R.debug).everyDayOfWeek().getCronExpression() // 0 0 0 ? * * everyDaysOfWeek Specify every N days of week. new Job('test', R.debug).betweenDaysOfWeek(1, 5).everyDaysOfWeek(2).getCronExpression() // 0 0 0 ? * 2-6/2 inYear Specify in which year. new Job('test', R.debug).inYear(2018).getCronExpression() // 0 0 0 * * ? 2018 fromYear Specify from which year. new Job('test', R.debug).fromYear(2018).everyYears(2).getCronExpression() // 0 0 0 * * ? 2018/2 inYears Specify in which years. new Job('test', R.debug).inYears(new List{ 2018, 2019 }).getCronExpression() // 0 0 0 * * ? 2018,2019 betweenYears Specify year range. new Job('test', R.debug).betweenYears(2018, 2020).getCronExpression() // 0 0 0 * * ? 2018-2020 everyYear Specify every year. new Job('test', R.debug).everyYear().getCronExpression() // 0 0 0 * * ? * everyYears Specify every N years. new Job('test', R.debug).betweenYears(2018, 2050).everyYears(2).getCronExpression() // 0 0 0 * * ? 2018-2050/2 onLastDayOfMonth Specify on the last day of month. new Job('test', R.debug).onLastDayOfMonth().getCronExpression() // 0 0 0 L * ? onLastWeekdayOfMonth Specify on the last week day of month. new Job('test', R.debug).onLastWeekdayOfMonth().getCronExpression() // 0 0 0 LW * ? onNearestWeekday Specify on nearest weekday of this day. new Job('test', R.debug).onNearestWeekday(20).getCronExpression() // 0 0 0 20W * ? onLastDayOfWeek Specify on the last day of week. new Job('test', R.debug).onLastDayOfWeek().getCronExpression() // 0 0 0 ? * L onLast Specify on the last 'Monday'. new Job('test', R.debug).onLast('Mon').getCronExpression() // 0 0 0 ? * 2L on1st Specify on the first 'Monday'. new Job('test', R.debug).on1st('Mon').getCronExpression() // 0 0 0 ? * 12 on2nd Specify on the second 'Monday'. new Job('test', R.debug).on2nd('Mon').getCronExpression() // 0 0 0 ? * 22 on3rd Specify on the third 'Monday'. new Job('test', R.debug).on3rd('Mon').getCronExpression() // 0 0 0 ? * 32 on4th Specify on the fourth 'Monday'. new Job('test', R.debug).on4th('Mon').getCronExpression() // 0 0 0 ? * 42 on5th Specify on the fifth 'Monday'. new Job('test', R.debug).on5th('Mon').getCronExpression() // 0 0 0 ? * 52 ","srcFilePath":"src/pages/docs/JobMethods/cron.md","id":"cron","location":"/docs/JobMethods/cron.html","url":"/job-apex/docs/JobMethods/cron.html"},"repeating":{"title":"Repeating Job Methods","description":"Repeating Job Methods","layout":"guide","icon":"code-file","weight":3,"content":" {$page.description} startAt Start the repeating job at the datetime. new Job('test', R.debug).startAt(Datetime.now()).afterMinutes(30).repeatOnce().schedule(); // Schedule a run-once job that starts now, triggered after 30 mins startNow Start the repeating job now. new Job('test', R.debug).startNow().afterMinutes(30).repeatOnce().schedule(); // Schedule a run-once job that starts now, triggered after 30 mins afterSeconds Repeating after N seconds. new Job('test', R.debug).startNow().afterSeconds(30).repeatOnce().schedule(); // Schedule a run-once job that starts now, triggered after 30 seconds afterMinutes Repeating after N minutes. new Job('test', R.debug).startNow().afterMinutes(30).repeatOnce().schedule(); // Schedule a run-once job that starts now, triggered after 30 minutes afterHours Repeating after N hours. new Job('test', R.debug).startNow().afterHours(10).repeatOnce().schedule(); // Schedule a run-once job that starts now, triggered after 10 hours afterDays Repeating after N days. new Job('test', R.debug).startNow().afterDays(10).repeatOnce().schedule(); // Schedule a run-once job that starts now, triggered after 10 days afterMonths Repeating after N months. new Job('test', R.debug).startNow().afterMonths(10).repeatOnce().schedule(); // Schedule a run-once job that starts now, triggered after 10 months. afterYears Repeating after N years. new Job('test', R.debug).startNow().afterYears(10).repeatOnce().schedule(); // Schedule a run-once job that starts now, triggered after 10 years afterTime Repeating after N milliseconds. new Job('test', R.debug).startNow().afterTime(10000).repeatOnce().schedule(); // Schedule a run-once job that starts now, triggered after 10000 milliseconds after Repeating after the time returned by the afterFunc. new Job('test', R.debug).startNow().after(R.multiply.apply(1000)).repeatOnce().schedule(); // Schedule a run-once job that starts now, triggered after 0s, 1s, 2s ... repeat Repeat max count. new Job('test', R.debug).startNow().afterMinutes(30).repeat(3).schedule(); // Schedule a job that starts now, triggered after 30 minutes, for 3 times repeatOnce Repeat only once. new Job('test', R.debug).startNow().afterMinutes(30).repeatOnce().schedule(); // Schedule a job that starts now, triggered after 30 minutes, for only 1 time repeatForever Repeat forever. new Job('test', R.debug).startNow().afterMinutes(30).repeatForever().schedule(); // Schedule a job that starts now, triggered after 30 minutes, running forever repeatUntil Repeat until func is satisfied. The func takes the current repeating number, and returns a Boolean. Returning true indicates that the repeating is finished. new Job('test', R.debug).startNow().afterMinutes(30).repeatUntil(R.equals.apply(2)).schedule(); // Schedule a job that starts now, triggered after 30 minutes until repeating count reaches 2 repeatUntil Repeat until the end datetime. new Job('test', R.debug).startNow().afterMinutes(30).repeatUntil(Datetime.newInstance(2018, 10, 1)).schedule(); // Schedule a job that starts now, triggered after 30 minutes, repeating until 2018/10/01 usingRepeat Check if the job is using repeating pattern. isRepeatSet Check if the job has set repeating. getNextDatetime Get the next triggered datetime of the job. Only available for repeating pattern job. ","srcFilePath":"src/pages/docs/JobMethods/repeating.md","id":"repeating","location":"/docs/JobMethods/repeating.html","url":"/job-apex/docs/JobMethods/repeating.html"}},"title":"Job Methods","description":"Methods in Job.apex","layout":"guide","icon":"code-file","weight":2,"content":" {$page.description} Job Method Reference Here is the reference of methods of Job.apex. You can use these methods in the way below: new Job('test', new CustomJob()) .everyDay() .atHour(8) .schedule(); ","srcFilePath":"src/pages/docs/JobMethods/index.md","id":"JobMethods","location":"/docs/JobMethods/","url":"/job-apex/docs/JobMethods/","childIds":["creation","common","cron","repeating"]},"Jobs":{"title":"Jobs Methods","description":"Jobs Methods","layout":"guide","icon":"cloud","weight":4,"content":" {$page.description} Jobs Methods Reference Here is the reference of the methods from Jobs. | Method | Description | | ------ | ----------- | | static getInstance() | Get the singleton instance | | CronTrigger getCronTriggerById(Id) | Get the cron trigger by id | | CronTrigger getCronTriggerByName(String) | Get the cron trigger by name | | List&lt;CronTrigger&gt; getCronTriggers() | Get all the cron triggers | | List&lt;CronTrigger&gt; getCronTriggers(String) | Get all the cron triggers that match the name | | clean(String) | Delete the job specified by the job name | | schedule(Job) | Schedule the job | | unschedule(CronTrigger) | Unschedule the job | | unscheduleById(Id) | Unschedule the job | | unscheduleByName(String) | Unschedule the job | | String reschedule(Job) | Reschedule the job | ","srcFilePath":"src/pages/docs/Jobs/index.md","id":"Jobs","location":"/docs/Jobs/","url":"/job-apex/docs/Jobs/"}},"childIds":["Job","JobMethods","Jobs","search"]},"tutorials":{"title":"Tutorials","description":"The tutorials","url":"/job-apex/tutorials/getting_started/step_1.html","layout":false,"content":" ","srcFilePath":"src/pages/tutorials/index.soy","id":"tutorials","location":"/tutorials/","customURL":true,"children":{"getting_started":{"title":"Getting Started","description":"The Getting Started Tutorial","tutorialTitle":"Getting started with Job.apex","url":"/job-apex/tutorials/getting_started/step_1.html","layout":false,"content":" ","srcFilePath":"src/pages/tutorials/getting_started/index.soy","id":"getting_started","location":"/tutorials/getting_started/","customURL":true,"children":{"step_1":{"title":"Installation","description":"Include Apex files","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":1,"content":" {$page.title} Job.apex has a dependency over R.apex. We need to firstly include R.apex. Include Func.cls, R.cls, and RTest.cls(optional) into your Org, and R.apex is ready. Then include Job.apex. Include Job.cls, JobTest.cls(optional), Jobs.cls and JobsTest.cls(optional) into your Org, and you are ready to go. ","srcFilePath":"src/pages/tutorials/getting_started/step_1.md","id":"step_1","location":"/tutorials/getting_started/step_1.html","url":"/job-apex/tutorials/getting_started/step_1.html"},"step_2":{"title":"Preliminary Knowledge","description":"Preliminary Knowledge","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":2,"content":" {$page.title} It's recommended that you have a fair amount of knowledge on R.apex, but it's not required. Job.apex uses Func objects from R.apex, and a Func is actually a custom Apex object that mimics the behavior of a function. Here is how your implement a custom Func. public class HelloWorldFunc extends Func { public HelloWorldFunc() { super(0); // specify the number of arguments the Func takes } // Provide custom implementation for a Func that takes 0 arguments. public override Object exec() { return 'Hello World'; } } And then you instantiate, and invoke it. Func helloworld = new HelloWorldFunc(); String msg = (String)helloworld.run(); To get deeper with Func objects, please check R.apex. ","srcFilePath":"src/pages/tutorials/getting_started/step_2.md","id":"step_2","location":"/tutorials/getting_started/step_2.html","url":"/job-apex/tutorials/getting_started/step_2.html"},"step_3":{"title":"Hello World Job","description":"Hello World Job","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":3,"content":" {$page.title} Below is how we create a simple HelloWorldJob. public class HelloWorldJob extends Func { public HelloWorldJob() { super(1); } public override Object exec(Object context) { System.debug('Hello World'); return null; } } We can directly use any Func as a Job executor. Here is how we create a job. Job j = new Job('helloworld', new HelloWorldJob()); And then we set when the job will execute. j.everyDay().atHour(8); Finally we schedule the job. j.schedule(); We can combine all of these into: new Job('helloworld', new HelloWorldJob()) .everyDay() .atHour(8) .schedule(); ","srcFilePath":"src/pages/tutorials/getting_started/step_3.md","id":"step_3","location":"/tutorials/getting_started/step_3.html","url":"/job-apex/tutorials/getting_started/step_3.html"},"step_4":{"title":"Cron Expression Jobs","description":"Cron Expression Jobs","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":4,"content":" {$page.title} Job.apex provides full support to Salesforce Apex scheduled job cron expressions. new Job('test', new CustomJob()) .everyDay() .atHour(8) .schedule(); // Schedule a job that runs at 8:00 everyday new Job('test', new CustomJob()) .betweenDaysOfWeek('Mon', 'Fri') .atHour(8) .schedule(); // Schedule a job that runs at 8:00 every week day new Job('test', new CustomJob()) .fromDay(1) .everyDays(2) .atHour(8) .schedule(); // Schedule a job that runs at 8:00 every other day from day 1 new Job('test', new CustomJob()) .inMonth('May') .on2nd('Sun') .atHour(8) .schedule(); // Schedule a job that runs at 8:00 on the second Sunday of May new Job('test', new CustomJob()) .onLastWeekdayOfMonth() .atHour(8) .schedule(); // Schedule a job that runs at 8:00 on the last week day of every month new Job('test', new CustomJob()) .inMonth('Sept') .onNearestWeekday(20) .atHour(8) .schedule(); // Schedule a job that runs at 8:00 on the nearest week day of 9/20 ","srcFilePath":"src/pages/tutorials/getting_started/step_4.md","id":"step_4","location":"/tutorials/getting_started/step_4.html","url":"/job-apex/tutorials/getting_started/step_4.html"},"step_5":{"title":"Repeating Jobs","description":"Repeating Jobs","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":5,"content":" {$page.title} Job.apex provides another type of jobs that can repeat themselves at given interval. new Job('test', new CustomJob()) .startNow() .everyMinutes(30) .repeatForever() .schedule(); // Schedule a job that first runs 30 minutes after now, and then repeats itself forever ","srcFilePath":"src/pages/tutorials/getting_started/step_5.md","id":"step_5","location":"/tutorials/getting_started/step_5.html","url":"/job-apex/tutorials/getting_started/step_5.html"},"step_6":{"title":"Job Management","description":"Job Management","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":6,"content":" {$page.title} We can create a job like this: Job j = new Job('test', new CustomJob()).everyDay().atHour(8); Jobs.getInstance().schedule(j); Or we can unschedule it: Jobs.getInstance().unschedule('test'); Or reschedule it. j.atHour(10); Jobs.getInstance().reschedule(j); ","srcFilePath":"src/pages/tutorials/getting_started/step_6.md","id":"step_6","location":"/tutorials/getting_started/step_6.html","url":"/job-apex/tutorials/getting_started/step_6.html"}},"childIds":["step_1","step_2","step_3","step_4","step_5","step_6"]}},"childIds":["getting_started"]}},"childIds":["docs","tutorials"]},"basePath":"/job-apex"}